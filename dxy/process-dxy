#!/usr/bin/env php
<?php
error_reporting(E_ERROR);
$province_names_data = `cat ../../china-province-names.csv`;
global $province_names;
$province_names  = array();
$province_names['en'] = array();
$province_names['zh'] = array();

foreach(explode("\n",$province_names_data) as $province_name_line) {
 #print "line is '$province_name_line'\n";
 list($chinese_name,$english_name) = explode('|',$province_name_line);
 #print " chinese name = $chinese_name\n";
 #print " english name = $english_name\n";
 $province_names['zh'][$chinese_name] = $english_name;
 $province_names['en'][$english_name] = $chinese_name;
}

# get live data
$data = `wget -O - https://3g.dxy.cn/newh5/view/pneumonia 2>/dev/null`;

# output buffer
$output = '';

#print "data is " . length($data) . " long\n";
#preg_match('/截至 (\d\d\d\d-\d\d-\d\d \d\d:\d\d)/',$data,$matches);
$last_update = highest_time($data);

#print "last update = $last_update\n";
#exit(0);

$output .= "# source: DXY @ https://3g.dxy.cn/newh5/view/pneumonia\n";
date_default_timezone_set('Asia/Shanghai');
$date_parsed = strtotime($last_update);
$output .= "# update: " . date('Y-m-d H:i:s T',$date_parsed) . "\n";
$output .= "# place|confirmed_cases|deaths|notes|sources\n";

preg_match('/window.getAreaStat = (.*?)<\//',$data,$matches);
$json_data = $matches[1];
$json_data = preg_replace('/}catch\(e\){}$/','',$json_data);
#print_r($json_data);
if(!($structure = json_decode($json_data,1))) {
 print "ERROR: Unable to parse JSON\n";
 exit(1);
}
#print_r($structure);

# calculate output filenames
$output_file_basename = dirname(__FILE__) . '/data/' . date('Ymd-His',$date_parsed) . '-dxy-2019ncov-data';
$output_csv_filename = $output_file_basename . '.csv';
$output_svg_filename = $output_file_basename . '.csv';
$output_json_filename = $output_file_basename . '.json';

# store JSON in case required later
file_put_contents($output_json_filename,$json_data);

$total_confirmed_cases = 0;
$total_deaths = 0;


# data
#     [29] => Array
#         (
#             [provinceName] => 河北省
#             [provinceShortName] => 河北
#             [confirmedCount] => 2
#             [suspectedCount] => 0
#             [curedCount] => 0
#             [deadCount] => 1
#             [comment] =>
#             [cities] => Array
#                 (
#                     [0] => Array
#                         (
#                             [cityName] => 石家庄
#                             [confirmedCount] => 1
#                             [suspectedCount] => 0
#                             [curedCount] => 0
#                             [deadCount] => 0
#                         )
# 
#                     [1] => Array
#                         (
#                             [cityName] => 沧州
#                             [confirmedCount] => 1
#                             [suspectedCount] => 0
#                             [curedCount] => 0
#                             [deadCount] => 1
#                         )
# 
#                 )
# 
#         )
# 

foreach($structure as $province) {
 $output .= province_name_to_english($province['provinceShortName']) . '|' . $province['confirmedCount'] . '|' . $province['deadCount'] . '|' . $province['comment'] . "|\n";
 $total_confirmed_cases += $province['confirmedCount'];
 $total_deaths += $province['deadCount'];
}

# now print total
$output .= "CHINA TOTAL|$total_confirmed_cases|$total_deaths||\n";

function province_name_to_english($province_chinese_name) {
 global $province_names;
 return $province_names['zh'][$province_chinese_name];
}

# output CSV
file_put_contents($output_csv_filename,$output);

# finally, generate SVG
$path = dirname(dirname(dirname(__FILE__))) . "/visualization/dxy-china-svg/dxy-china-csv2svg";
exec("$path $output_csv_filename");
print "OK\n";

# extract publication time from newly simplified HTML
function highest_time($data) {
        $highest_time = 0;
        $data = preg_replace('/,/',"\n",$data);
        $lines = explode("\n",$data);
        foreach($lines as $line) {
         if(preg_match('/:(\d{10})/',$line,$matches)) {
          if($matches[1] > $highest_time) {
           $highest_time = $matches[1];
          }
         }
        }
	# add 8 hours for CST
	$highest_time = $highest_time + (60*60*8);
        return gmdate('Y-m-d H:i:s',$highest_time);
}

?>
